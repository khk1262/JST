// Generated by gencpp from file ros_servo/CartControl.msg
// DO NOT EDIT!


#ifndef ROS_SERVO_MESSAGE_CARTCONTROL_H
#define ROS_SERVO_MESSAGE_CARTCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_servo
{
template <class ContainerAllocator>
struct CartControl_
{
  typedef CartControl_<ContainerAllocator> Type;

  CartControl_()
    : state(0)
    , left_speed(0)
    , right_speed(0)  {
    }
  CartControl_(const ContainerAllocator& _alloc)
    : state(0)
    , left_speed(0)
    , right_speed(0)  {
  (void)_alloc;
    }



   typedef uint16_t _state_type;
  _state_type state;

   typedef uint16_t _left_speed_type;
  _left_speed_type left_speed;

   typedef uint16_t _right_speed_type;
  _right_speed_type right_speed;





  typedef boost::shared_ptr< ::ros_servo::CartControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_servo::CartControl_<ContainerAllocator> const> ConstPtr;

}; // struct CartControl_

typedef ::ros_servo::CartControl_<std::allocator<void> > CartControl;

typedef boost::shared_ptr< ::ros_servo::CartControl > CartControlPtr;
typedef boost::shared_ptr< ::ros_servo::CartControl const> CartControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_servo::CartControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_servo::CartControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_servo::CartControl_<ContainerAllocator1> & lhs, const ::ros_servo::CartControl_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.left_speed == rhs.left_speed &&
    lhs.right_speed == rhs.right_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_servo::CartControl_<ContainerAllocator1> & lhs, const ::ros_servo::CartControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_servo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_servo::CartControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_servo::CartControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_servo::CartControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_servo::CartControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_servo::CartControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_servo::CartControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_servo::CartControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "853f76a12162f38728944369533dcd01";
  }

  static const char* value(const ::ros_servo::CartControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x853f76a12162f387ULL;
  static const uint64_t static_value2 = 0x28944369533dcd01ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_servo::CartControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_servo/CartControl";
  }

  static const char* value(const ::ros_servo::CartControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_servo::CartControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# state of Cart and speed of wheels\n"
"uint16 state\n"
"uint16 left_speed\n"
"uint16 right_speed\n"
"\n"
;
  }

  static const char* value(const ::ros_servo::CartControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_servo::CartControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.left_speed);
      stream.next(m.right_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CartControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_servo::CartControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_servo::CartControl_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.state);
    s << indent << "left_speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.left_speed);
    s << indent << "right_speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SERVO_MESSAGE_CARTCONTROL_H
