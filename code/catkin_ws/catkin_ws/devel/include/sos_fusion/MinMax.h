// Generated by gencpp from file sos_fusion/MinMax.msg
// DO NOT EDIT!


#ifndef SOS_FUSION_MESSAGE_MINMAX_H
#define SOS_FUSION_MESSAGE_MINMAX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace sos_fusion
{
template <class ContainerAllocator>
struct MinMax_
{
  typedef MinMax_<ContainerAllocator> Type;

  MinMax_()
    : cen()
    , min()
    , max()  {
    }
  MinMax_(const ContainerAllocator& _alloc)
    : cen(_alloc)
    , min(_alloc)
    , max(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _cen_type;
  _cen_type cen;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _min_type;
  _min_type min;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _max_type;
  _max_type max;





  typedef boost::shared_ptr< ::sos_fusion::MinMax_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sos_fusion::MinMax_<ContainerAllocator> const> ConstPtr;

}; // struct MinMax_

typedef ::sos_fusion::MinMax_<std::allocator<void> > MinMax;

typedef boost::shared_ptr< ::sos_fusion::MinMax > MinMaxPtr;
typedef boost::shared_ptr< ::sos_fusion::MinMax const> MinMaxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sos_fusion::MinMax_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sos_fusion::MinMax_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sos_fusion::MinMax_<ContainerAllocator1> & lhs, const ::sos_fusion::MinMax_<ContainerAllocator2> & rhs)
{
  return lhs.cen == rhs.cen &&
    lhs.min == rhs.min &&
    lhs.max == rhs.max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sos_fusion::MinMax_<ContainerAllocator1> & lhs, const ::sos_fusion::MinMax_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sos_fusion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sos_fusion::MinMax_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sos_fusion::MinMax_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sos_fusion::MinMax_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sos_fusion::MinMax_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sos_fusion::MinMax_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sos_fusion::MinMax_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sos_fusion::MinMax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07d108d9b7862b4dd2cf6e8fa86751ba";
  }

  static const char* value(const ::sos_fusion::MinMax_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07d108d9b7862b4dULL;
  static const uint64_t static_value2 = 0xd2cf6e8fa86751baULL;
};

template<class ContainerAllocator>
struct DataType< ::sos_fusion::MinMax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sos_fusion/MinMax";
  }

  static const char* value(const ::sos_fusion::MinMax_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sos_fusion::MinMax_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Max and Min x, y points of cluster\n"
"geometry_msgs/Point cen\n"
"geometry_msgs/Point min\n"
"geometry_msgs/Point max\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::sos_fusion::MinMax_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sos_fusion::MinMax_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cen);
      stream.next(m.min);
      stream.next(m.max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MinMax_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sos_fusion::MinMax_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sos_fusion::MinMax_<ContainerAllocator>& v)
  {
    s << indent << "cen: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.cen);
    s << indent << "min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SOS_FUSION_MESSAGE_MINMAX_H
